// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gnmireverse

import (
	context "context"
	gnmi "github.com/openconfig/gnmi/proto/gnmi"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GNMIReverseClient is the client API for GNMIReverse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GNMIReverseClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (GNMIReverse_PublishClient, error)
}

type gNMIReverseClient struct {
	cc grpc.ClientConnInterface
}

func NewGNMIReverseClient(cc grpc.ClientConnInterface) GNMIReverseClient {
	return &gNMIReverseClient{cc}
}

func (c *gNMIReverseClient) Publish(ctx context.Context, opts ...grpc.CallOption) (GNMIReverse_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &GNMIReverse_ServiceDesc.Streams[0], "/gnmireverse.gNMIReverse/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &gNMIReversePublishClient{stream}
	return x, nil
}

type GNMIReverse_PublishClient interface {
	Send(*gnmi.SubscribeResponse) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type gNMIReversePublishClient struct {
	grpc.ClientStream
}

func (x *gNMIReversePublishClient) Send(m *gnmi.SubscribeResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gNMIReversePublishClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GNMIReverseServer is the server API for GNMIReverse service.
// All implementations must embed UnimplementedGNMIReverseServer
// for forward compatibility
type GNMIReverseServer interface {
	Publish(GNMIReverse_PublishServer) error
	mustEmbedUnimplementedGNMIReverseServer()
}

// UnimplementedGNMIReverseServer must be embedded to have forward compatible implementations.
type UnimplementedGNMIReverseServer struct {
}

func (UnimplementedGNMIReverseServer) Publish(GNMIReverse_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedGNMIReverseServer) mustEmbedUnimplementedGNMIReverseServer() {}

// UnsafeGNMIReverseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GNMIReverseServer will
// result in compilation errors.
type UnsafeGNMIReverseServer interface {
	mustEmbedUnimplementedGNMIReverseServer()
}

func RegisterGNMIReverseServer(s grpc.ServiceRegistrar, srv GNMIReverseServer) {
	s.RegisterService(&GNMIReverse_ServiceDesc, srv)
}

func _GNMIReverse_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GNMIReverseServer).Publish(&gNMIReversePublishServer{stream})
}

type GNMIReverse_PublishServer interface {
	SendAndClose(*Empty) error
	Recv() (*gnmi.SubscribeResponse, error)
	grpc.ServerStream
}

type gNMIReversePublishServer struct {
	grpc.ServerStream
}

func (x *gNMIReversePublishServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gNMIReversePublishServer) Recv() (*gnmi.SubscribeResponse, error) {
	m := new(gnmi.SubscribeResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GNMIReverse_ServiceDesc is the grpc.ServiceDesc for GNMIReverse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GNMIReverse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnmireverse.gNMIReverse",
	HandlerType: (*GNMIReverseServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _GNMIReverse_Publish_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gnmireverse.proto",
}

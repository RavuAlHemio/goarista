// Copyright (c) 2022 Arista Networks, Inc.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

syntax = "proto3";

// healthzdata.proto version changelist
// version 0: initial version

// A HealthzData message is returned in the GNOI Healthz RPC,
// to satisfy the ComponentStatus.healthz field, which is described as:
// ```
// Opaque data for how the healthcheck is implemented.  This can be any
// proto defined by the vendor.  This could be the equivalent to outputs
// like "show tech" or core files or any other diagnostic data.
// ``
// The size of the message may be large.
// Ensure that the client is configured to receive large message sizes.
message HealthzData {
  // healthzdata.proto version number
  uint32 version = 1;

  // data points collected for a component
  repeated HealthzDataPoint data_points = 2;
}

// A HealthzDataPoint represents data from one source
// that relates to a component.
// For example, the data relating to one 'show' command.
// If multiple sources are being used to collect data,
// each one will be captured in its own datapoint.
message HealthzDataPoint{
  oneof datapoint {
    ShowCommand show_command = 1;
    SupportScript support_script = 2;
    Logs logs = 3;
  }
}

// A Logs datapoint captures information from one or more
// log files on the system.
message Logs {
  string logs_description = 1;
  // data is a .tar.gz archive containing log file(s)
  bytes data = 2;
}

// A ShowCommand datapoint captures information from
// running a CLI show command on the system
message ShowCommand {
  string show_command = 1;
  // data is a .tar.gz archive containing
  // a JSON or text file with show command output
  bytes data = 2;
}

// A SupportScript datapoint captures information
// from running an existing support script
// on the system.
message SupportScript {
  string script_name = 1;
  // data is a .tar.gz archive containing file(s)
  // generated by the support script
  bytes data = 2;
}
